<?php

/**
 * @file
 * Defines time period widgets and formatter.
 */

/**
 * Implements hook_element_info().
 */
function timeperiod_element_info() {
  // A duration form element which represents the duration in seconds.
  $types['timeperiod_select'] = array(
    '#input' => TRUE,
    '#tree' => TRUE,
    '#default_value' => 0,
    '#value_callback' => 'timeperiod_element_value',
    '#process' => array('timeperiod_element_process', 'ajax_process_form'),
    '#after_build' => array('timeperiod_element_after_build'),
    '#pre_render' => array('form_pre_render_conditional_form_element'),
    // Controls the available units. Array keys are the units, see
    // timeperiod_element_units(). Array values control the maxium allowed
    // value per unit.
    '#units' => array(
      '3600' => 24,
      '60' => 60,
    ),
  );
  return $types;
}

/**
 * FAPI process callback for the timeperiod element type.
 */
function timeperiod_element_process($element, &$form_state) {
  $unit_labels = timeperiod_element_units();
  foreach ($element['#units'] as $unit => $max) {
    $element[$unit] = array(
      '#type' => 'select',
      '#title' => $unit_labels[$unit],
      '#options' => drupal_map_assoc(range(0, $max)),
      '#default_value' => (int) $element['#default_value'] / $unit,
    );
  }
  // Put the child elements in a container-inline div.
  $element['#prefix'] = '<div class="timeperiod-element container-inline">';
  $element['#suffix'] = '</div>';

  return $element;
}

/**
 * Defines possible duration multiplier.
 */
function timeperiod_element_units() {
  return array(
    '86400' => t('Days'),
    '3600' => t('Hours'),
    '60' => t('Minutes'),
    '1' => t('Seconds'),
  );
}

/**
 * Helper function to determine the value for a rules duration form
 * element.
 */
function timeperiod_element_value($element, $input = FALSE) {
  // This runs before child elements are processed, so we cannot calculate the
  // value here. But we have to make sure the value is an array, so the form
  // API is able to process the children to set their values in the array. Thus
  // once the form API has finished processing the element, the value is an
  // array containing the child element values. Then finally the after build
  // callback converts it back to the numeric value and sets that.
  return array();
}

/**
 * FAPI after build callback for the time period form element to fix the form value.
 */
function timeperiod_element_after_build($element, &$form_state) {
  $element['#value'] = 0;
  foreach ($element['#units'] as $unit => $max) {
    $element['#value'] += $unit * $element[$unit]['#value'];
  }
  form_set_value($element, $element['#value'], $form_state);
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function timeperiod_field_widget_info() {
  return array(
    'timeperiod_select' => array(
      'label' => t('Time period (select)'),
      'field types' => array('number_integer'),
      'settings' => array('units' => array('3600', '60')),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function timeperiod_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';


  $element += array(
    '#type' => 'textfield',
    '#default_value' => $value,
    // Allow a slightly larger size that the field length to allow for some
    // configurations where all characters won't fit in input field.
    '#size' => $field['type'] == 'timeperiod_decimal' ? $field['settings']['precision'] + 4 : 12,
    // Allow two extra characters for signed values and decimal separator.
    '#maxlength' => $field['type'] == 'timeperiod_decimal' ? $field['settings']['precision'] + 2 : 10,
    // Extract the number type from the field type name for easier validation.
    '#timeperiod_type' => str_replace('timeperiod_', '', $field['type']),
  );

  // Add prefix and suffix.
  if (!empty($instance['settings']['prefix'])) {
    $prefixes = explode('|', $instance['settings']['prefix']);
    $element['#field_prefix'] = field_filter_xss(array_pop($prefixes));
  }
  if (!empty($instance['settings']['suffix'])) {
    $suffixes = explode('|', $instance['settings']['suffix']);
    $element['#field_suffix'] = field_filter_xss(array_pop($suffixes));
  }

  $element['#element_validate'][] = 'timeperiod_field_widget_validate';

  return array('value' => $element);
}

/**
 * FAPI validation of an individual number element.
 */
function timeperiod_field_widget_validate($element, &$form_state) {
  $field = field_widget_field($element, $form_state);
  $instance = field_widget_instance($element, $form_state);

  $type = $element['#timeperiod_type'];
  $value = $element['#value'];

  // Reject invalid characters.
  if (!empty($value)) {
    switch ($type) {
      case 'float':
      case 'decimal':
        $regexp = '@([^-0-9\\' . $field['settings']['decimal_separator'] . '])|(.-)@';
        $message = t('Only numbers and the decimal separator (@separator) allowed in %field.', array('%field' => $instance['label'], '@separator' => $field['settings']['decimal_separator']));
        break;

      case 'integer':
        $regexp = '@([^-0-9])|(.-)@';
        $message = t('Only numbers are allowed in %field.', array('%field' => $instance['label']));
        break;
    }
    if ($value != preg_replace($regexp, '', $value)) {
      form_error($element, $message);
    }
  }
}

/**
 * Implements hook_field_widget_error().
 */
function timeperiod_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element['value'], $error['message']);
}

/**
 * Implements hook_field_widget_settings_form().
 */
function hook_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  $form['units'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Available units'),
    '#options' => timeperiod_element_units(),
    '#default_value' => $settings['units'],
    '#required' => TRUE,
  );
  return $form;
}




/**
 * Implements hook_field_formatter_info().
 */
function timeperiod_field_formatter_info() {
  return array(
    // The 'Default' formatter is different for integer fields on the one hand,
    // and for decimal and float fields on the other hand, in order to be able
    // to use different default values for the settings.
    'timeperiod_integer' => array(
      'label' => t('Default'),
      'field types' => array('timeperiod_integer'),
      'settings' =>  array(
        'thousand_separator' => ' ',
        // The 'decimal_separator' and 'scale' settings are not configurable
        // through the UI, and will therefore keep their default values. They
        // are only present so that the 'timeperiod_integer' and 'timeperiod_decimal'
        // formatters can use the same code.
        'decimal_separator' => '.',
        'scale' => 0,
        'prefix_suffix' => TRUE,
      ),
    ),
    'timeperiod_decimal' => array(
      'label' => t('Default'),
      'field types' => array('timeperiod_decimal', 'timeperiod_float'),
      'settings' =>  array(
        'thousand_separator' => ' ',
        'decimal_separator' => '.',
        'scale' => 2,
        'prefix_suffix' => TRUE,
      ),
    ),
    'timeperiod_unformatted' => array(
      'label' => t('Unformatted'),
      'field types' => array('timeperiod_integer', 'timeperiod_decimal', 'timeperiod_float'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function timeperiod_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] == 'timeperiod_decimal' || $display['type'] == 'timeperiod_integer') {
    $options = array(
      ''  => t('<none>'),
      '.' => t('Decimal point'),
      ',' => t('Comma'),
      ' ' => t('Space'),
    );
    $element['thousand_separator'] = array(
      '#type' => 'select',
      '#title' => t('Thousand marker'),
      '#options' => $options,
      '#default_value' => $settings['thousand_separator'],
    );

    if ($display['type'] == 'timeperiod_decimal') {
      $element['decimal_separator'] = array(
        '#type' => 'select',
        '#title' => t('Decimal marker'),
        '#options' => array('.' => t('Decimal point'), ',' => t('Comma')),
        '#default_value' => $settings['decimal_separator'],
      );
      $element['scale'] = array(
        '#type' => 'select',
        '#title' => t('Scale'),
        '#options' => drupal_map_assoc(range(0, 10)),
        '#default_value' => $settings['scale'],
        '#description' => t('The number of digits to the right of the decimal.'),
      );
    }

    $element['prefix_suffix'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display prefix and suffix.'),
      '#default_value' => $settings['prefix_suffix'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function timeperiod_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  if ($display['type'] == 'timeperiod_decimal' || $display['type'] == 'timeperiod_integer') {
    $summary[] = timeperiod_format(1234.1234567890, $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
    if ($settings['prefix_suffix']) {
      $summary[] = t('Display with prefix and suffix.');
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function timeperiod_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'timeperiod_integer':
    case 'timeperiod_decimal':
      foreach ($items as $delta => $item) {
        $output = timeperiod_format($item['value'], $settings['scale'], $settings['decimal_separator'], $settings['thousand_separator']);
        if ($settings['prefix_suffix']) {
          $prefixes = isset($instance['settings']['prefix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['prefix'])) : array('');
          $suffixes = isset($instance['settings']['suffix']) ? array_map('field_filter_xss', explode('|', $instance['settings']['suffix'])) : array('');
          $prefix = (count($prefixes) > 1) ? format_plural($item['value'], $prefixes[0], $prefixes[1]) : $prefixes[0];
          $suffix = (count($suffixes) > 1) ? format_plural($item['value'], $suffixes[0], $suffixes[1]) : $suffixes[0];
          $output = $prefix . $output . $suffix;
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;

    case 'timeperiod_unformatted':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['value']);
      }
      break;
  }

  return $element;
}

